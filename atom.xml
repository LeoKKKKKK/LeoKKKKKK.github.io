<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-10-31T16:11:58.213Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>“循环语句”</title>
    <link href="http://example.com/2021/11/01/%E2%80%9C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E2%80%9D/"/>
    <id>http://example.com/2021/11/01/%E2%80%9C%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5%E2%80%9D/</id>
    <published>2021-10-31T16:02:18.000Z</published>
    <updated>2021-10-31T16:11:58.213Z</updated>
    
    <content type="html"><![CDATA[<ol><li>while 循环</li><li>while 的语法结构<br>while(表达式)</li></ol><p>{<br>        循环语句;</p><p>}</p><p>当表达式为真时，进入循环执行循环语句，直到表达式为假跳出循环。</p><p>例如：</p><p>#include&lt;stdio.h&gt;<br>//在屏幕上打印1-10的数字<br>int main()<br>{<br>    int i = 1;<br>    while(i &lt;= 10)<br>    {<br>        printf(“%d  “,i);<br>        i+=1;<br>    }<br>    return 0;<br>}<br>运行结果：</p><ol start="2"><li>while 语句中的 break 和 continue</li><li>break 在 while 循环中的作用：在循环中只要遇到 break ，就停止后期的所有的循环，直接终止其所在的循环。</li></ol><p>举个栗子：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 1;<br>    while(i &lt;= 10)<br>    {<br>    if(5 == i)<br>        break;<br>    printf(“%d  “, i);<br>    i += 1;<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>当 i 从1自增到5进入 if 语句执行 break ,而 break 会直接跳出循环，永久循环终止。</p><p>2.continue 在 while 循环中的作用：continue 是用于终止本次循环的，也就是本次循环中 continue 后面的代码不会再执行，直接跳转到 while 语句的判断部分。进行下一次循环的入口的判断。</p><p>举个栗子：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 1;<br>    while(i &lt;= 10)<br>    {<br>        if(5 == i)<br>           continue;<br>        printf(“%d  “, i);<br>        i += 1;<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>i 从1 自增到5进入 if 语句执行 continue ,而 continue 会跳过其之后的所有代码，i 不会再被打印也不会再自增，一直是 i 等于5 的死循环。</p><ol start="3"><li>while 循环中 getchar((~scanf())) 和 putchar 的使用</li><li>getchar 从键盘中获取一个字符，putchar 输出该字符。搭配 while 可多次输入输出字符。</li></ol><p>观察如下代码：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int ch = 0;<br>    while((ch = getchar()) != EOF)//while(~scanf(“%d”, &amp;ch))<br>        putchar(ch);<br>    return 0;<br>}<br>运行结果：</p><p>想要结束程序得到 EOF 只需按 Ctrl + Z</p><p>分析：</p><p>1.EOF  —  end of file  — 文件结束标志，getchar 读取失败的时候会返回 EOF。 </p><p>2.返回的字符本身也是 ASCII 码值，是整数。</p><ol start="3"><li><p>getchar 函数不仅仅是返回正常字符，还会返回 EOF 是-1，所以放在整型变量中</p></li><li><p>使用（~scanf()）可以达到与 getcher 一样的效果，其原理一样</p></li><li><p>EOF 对应 -1 补码按位取反得到 0。在判断是否进入循环的表达式中，0为假，非0为真，由于得0，不在进入循环，可以达到停止循环的效果。</p></li></ol><p>练习1：</p><p>#include&lt;stdio.h&gt;<br>//输入大写字母转换为小写字母<br>int main()<br>{<br>    int ch = 0;<br>    while((ch = getchar()) != EOF)<br>    {<br>         putchar(ch+32);<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>练习2：</p><p>#include&lt;stdio.h&gt;<br>//在输入的字符中只输出0~9的数字<br>int main()<br>{<br>    int ch = 0;<br>    while((ch = getchar()) != EOF)<br>    {<br>        if(ch &lt; ‘0’ || ch &gt; ‘9’)<br>          continue;<br>        putchar(ch);<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>2.for循环<br>1.for 循环的语法结构<br>for(表达式1; 表达式2； 表达式3)</p><p>{</p><pre><code>    循环语句；</code></pre><p>}</p><p>表达式1为初始化部分，用于初始化循环变量。表达式2为条件判断部分，用于判断循环是否终止。</p><p>表达式3为调整部分，用于循环条件的调整。</p><p>举个栗子，for 循环的使用：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    //for(i = 1/<em>初始化</em>/;i &lt;= 10/<em>判断部分</em>/;i++/<em>调整部分</em>/)<br>    for(i = 1; i&lt;= 10; i++)<br>    {<br>        printf(“%d  “,i);<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>for 循环与 while 循环的对比：while 循环的判断与调整部分可能会距离太远，导致整体修改时过于繁琐。而for循环初始化，判断，调整都在一起，使用起来更方便，所以 for 循环在使用中使用频率是最高的。</p><p>实现相同的功能(打印十个 hehe)</p><p>//使用 for 循环<br>for(i = 1; i &lt;= 10; i++)<br>{<br>    printf(“hehe\n”);<br>}<br>//使用 while 循环<br>int i = 0;<br>i = 1;//初始化<br> while(i &lt;= 10)//判断<br>{<br>    printf(“hehe\n”);<br>    i += 1;//调整<br>}<br>2. 在 for 循环中的 break 和 continue<br>1.break 在 for 循环中和在while 循环中的作用一样：在循环中只要遇到 break ，就停止后期的所有的循环，直接终止其所在的循环。</p><p>举个栗子：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    for(i=1 ; i&lt;=10 ; i++)<br>    {<br>        if(i == 5)<br>            break;<br>        printf(“%d  “,i);<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>当 i 从1自增到5进入 if 语句执行 break ,而 break 会直接跳出循环，永久循环终止。</p><p>2.continue 在for 循环中与 while 循环中的作用一样：continue 是用于终止本次循环的，也就是本次循环中 continue 后面的代码不会再执行，直接跳转到 while 语句的判断部分。进行下一次循环的入口的判断。</p><p>举个栗子：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    for(i=1 ;i &lt;=10; i++)<br>    {<br>        if(i == 5)<br>            continue;<br>        printf(“%d “,i);<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>i 从1 自增到5进入 if 语句执行 continue ,而 continue 会跳过其之后的所有代码，5 不会再被打印。</p><ol start="3"><li>for 语句的循环控制变量</li><li>不可在 for 循环体内修改循环变量，防止 for 循环失去控制。</li></ol><p>举个栗子：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    for(i=1 ;i &lt;=10; i++)<br>    {<br>        if(i = 5）<br>            printf(“%d “,i);<br>    }<br>    return 0;<br>}<br>运行结果：死循环的打印5</p><p>由于 if 语句中的 i 为赋值，使得每次 i 进入循环以后都被赋值为 5，恒为真，并且 i++与赋值为 5 陷入了死循环，所以一直死循环的打印5。</p><ol start="2"><li>for 循环的变种</li></ol><p>变种1：省略部分条件</p><p>#include&lt;stdio.h&gt;<br>//初始化，判断，调整三部分都省略了<br>int main()<br>{<br>    for( ; ; )<br>    {<br>        printf(“Hello world!\n”);<br>    }<br>    return 0;<br>}<br>运行结果：死循环的打印 Hello world!</p><p>判断部分只要省略就意味着，恒为真。</p><p>练习：</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    int j = 0;<br>    for( ;i &lt; 10 ; i++)<br>    {<br>        for( ; j &lt; 10 ; j++)<br>        {<br>            printf(“Hello world\n”);<br>        }<br>    }<br>    return 0;<br>}<br>运行结果：只打印了10个 Hello world</p><p>由于 j 的初始化部分省略了，循环十次以后直接自增为10，不会再被重置，内部嵌套的 for 循环不会再进入，只可以打印十个 Hello world。</p><p>2.变种2：多个变量同时控制 for 循环</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int x = 0, y = 0;<br>    for(x = 0, y = 0; x&lt;2 &amp;&amp; y&lt;5; ++x, y++)<br>    {<br>        printf(“Hello world!\n”);<br>    }<br>    return 0;<br>}<br>运行结果：</p><p>3.do…while()循环<br>1.do…while语句的语法结构<br>do</p><pre><code>    循环语句;</code></pre><p>while(表达式);</p><p>do…while语句的特点：循环至少执行一次，使用场景有限。</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    do<br>    {<br>        printf(“%d \n”,i);<br>        i++;<br>    }while(i&lt;10);<br>    return 0;<br>}<br>运行结果：</p><p>2.do…while 循环中的 break 和 continue<br>1.do…while 循环中的break</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    do<br>    {<br>        if(5 == i)<br>            break;<br>        printf(“%d\n “, i);<br>        i++;<br>    }while(i&lt;10);<br>    return 0;<br>}<br>运行结果：</p><p>2.do…while循环中的continue</p><p>#include&lt;stdio.h&gt;<br>int main()<br>{<br>    int i = 0;<br>    do<br>    {<br>        i++;<br>        if(5 == i)<br>            continue;<br>        printf(“%d\n”,i);<br>    }while(i&lt;10);<br>    return 0;<br>}<br>运行结果：</p><p>————————————————</p>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;while 循环&lt;/li&gt;
&lt;li&gt;while 的语法结构&lt;br&gt;while(表达式)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;{&lt;br&gt;        循环语句;&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;当表达式为真时，进入循环执行循环语句，直到表达式为假跳出循环。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>“if语句”</title>
    <link href="http://example.com/2021/10/22/%E2%80%9Cif%E8%AF%AD%E5%8F%A5%E2%80%9D/"/>
    <id>http://example.com/2021/10/22/%E2%80%9Cif%E8%AF%AD%E5%8F%A5%E2%80%9D/</id>
    <published>2021-10-22T05:04:40.000Z</published>
    <updated>2021-10-22T11:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="if语句-1-一般形式："><a href="#if语句-1-一般形式：" class="headerlink" title="if语句=1.一般形式："></a>if语句=1.一般形式：</h3><p>if (表达式) {语句;}</p><p>表达式：<br>a,用非 0 值表示真，用 0 表示假;<br>b,if(flag) 相当于 if(1==flag)<br>c,浮点数无法与 0 比较，只能用近似的值比较；例: 1e-6 等于1x10的-6次方可以看成0来使用；</p><p>2.用于单分支选择结构;<br>3.如含有交叉关系，使用并列的if语句;</p><p>例1：输出两个整数中的最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">     int a,b;</span><br><span class="line">     printf(&quot;请输入两个整数：&quot;);</span><br><span class="line">     scanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class="line">     if(a&gt;b)</span><br><span class="line">     &#123;</span><br><span class="line">     printf(&quot;max = %d\n&quot;,a);</span><br><span class="line">     &#125;</span><br><span class="line">     if(a&lt;b)</span><br><span class="line">     &#123;</span><br><span class="line">     printf(&quot;max = %d\n&quot;,b);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、if-…-…-else-…"><a href="#二、if-…-…-else-…" class="headerlink" title="二、if(…) {…} else {…}"></a>二、if(…) {…} else {…}</h3><p>一般形式：if(表达式) {语句1; } else { 语句2;}<br>用于双分支控制的条件语句;<br>用于非此即彼的关系时;<br>例2：输出两个整数中的最大值</p><p>例2关于对于非法字符的检查与处理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;`</span><br><span class="line">`void main()`</span><br><span class="line">`&#123;`</span><br><span class="line">`int a,b,max,data;`</span><br><span class="line">`printf(&quot;Input a,b:&quot;);`</span><br><span class="line">`data = scanf(&quot; %d,%d&quot;,&amp;a,&amp;b);/*记录scanf()的返回值；*/`</span><br><span class="line">`if(data!=2)/*根据scanf()的返回值判断输入数据个数或者格式是否错误*/`</span><br><span class="line">    `&#123;`</span><br><span class="line">`printf(&quot;格式输入错误！&quot;);`</span><br><span class="line">`fflush(stdin);/*清除输入缓冲区中的错误内容（fflush()可能带来可移植性的问题）*/`</span><br><span class="line">`&#125;`</span><br><span class="line">`else`</span><br><span class="line">`&#123;`</span><br><span class="line">`max = a&gt;b?a:b;/*三目运算符(a&gt;b值为真则输出a的值，反之输出b的值)*/`</span><br><span class="line">`printf(&quot;%d\n&quot;,max);`</span><br><span class="line">`&#125;`</span><br><span class="line"></span><br><span class="line">`&#125;</span><br></pre></td></tr></table></figure><h3 id="三、if-…-…-else-if-…-…-…-else-if-…-…-else-…"><a href="#三、if-…-…-else-if-…-…-…-else-if-…-…-else-…" class="headerlink" title="三、if(…) {…} else if(…) {…} … else if(…) {…} else {…}"></a><strong>三、if(…) {…} else if(…) {…} … else if(…) {…} else {…}</strong></h3><p>一般形式：<br>if(表达式1) { 语句1;}<br>else if(表达式2) {语句2;}<br>…<br>else if(表达式n){语句n;}<br>else{语句n+1;}</p><p>用于多分支的控制的条件语句;</p><p>例3：判断字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">char ch;</span><br><span class="line">printf(&quot;请输入一个字符：&quot;);</span><br><span class="line">ch = getchar();/*getchar、putchar专门用于字符输入输出；</span><br><span class="line">     getchar()写法上要写为 变量 = getchar();</span><br><span class="line"> putchar()用法为putchar(变量);</span><br><span class="line"> putchar(&#x27;\n&#x27;)输出一个控制符；</span><br><span class="line"> putchar(&#x27;字母/字符&#x27;);输出字母/字符；</span><br><span class="line"> */</span><br><span class="line">if(ch&lt;=31)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;这是一个控制字符或通讯专用字符！\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(ch &gt;= &#x27;0&#x27; &amp;&amp; ch &lt;= &#x27;9&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;这是一个数字！\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(ch &gt;= &#x27;A&#x27; &amp;&amp; ch &lt;= &#x27;Z&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;这是一个大写字母!\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else if(ch &gt;= &#x27;a&#x27; &amp;&amp; ch &lt;= &#x27;z&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;这是一个小写字母！\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;这是其他字符！\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、switch-case-…-…-case-…-…-…-default-…"><a href="#四、switch-case-…-…-case-…-…-…-default-…" class="headerlink" title="四、switch() {case …: …; case …: …; … default: …;}"></a>四、switch() {case …: …; case …: …; … default: …;}</h3><p>一般形式：<br>switch(表达式)<br>{<br>case 常量1:语句1;<br>case 常量2:语句2;<br>…<br>case 常量n:语句n;<br>default: 语句n+1;<br>}<br>用于多路选择的语句;<br>switch语句相当于多个if-else语句;<br>(表达式)只能是char型或者int型;<br>case 后面至少要有一个空格，常量后面是冒号<br>(表达式)与 常量类型要保持一致;<br>记得记得记得 在需要跳出的时候，在语句后面加上break;</p><p>例4：简单的加减乘除计算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">double a,b;</span><br><span class="line">char ch;</span><br><span class="line">printf(&quot;Input a(+ - * /)b:&quot;);</span><br><span class="line">scanf(&quot;%f%c%f&quot;,&amp;a,&amp;ch,&amp;b);</span><br><span class="line">switch(ch)</span><br><span class="line">&#123;</span><br><span class="line">case &#x27;+&#x27;:</span><br><span class="line">printf(&quot;%f%c%f=%.2f\n&quot;,a,ch,b,a+b);</span><br><span class="line">break;</span><br><span class="line">case &#x27;-&#x27;:</span><br><span class="line">printf(&quot;%f%c%f=%.2f\n&quot;,a,ch,b,a-b);</span><br><span class="line">break;</span><br><span class="line">case &#x27;*&#x27;:</span><br><span class="line">case &#x27;X&#x27;:</span><br><span class="line">case &#x27;x&#x27;:</span><br><span class="line">printf(&quot;%f%c%f=%.2f\n&quot;,a,ch,b,a*b);/*输入&quot;x&quot; &quot;X&quot; &quot;*&quot; 都执行这一条语句；不加break，会顺语句执行*/</span><br><span class="line">break;</span><br><span class="line">case &#x27;/&#x27;:</span><br><span class="line">printf(&quot;%f%c%f=%.2f\n&quot;,a,ch,b,a/b);</span><br><span class="line">break;</span><br><span class="line">default:</span><br><span class="line">printf(&quot;请输入正确算式！\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;if语句-1-一般形式：&quot;&gt;&lt;a href=&quot;#if语句-1-一般形式：&quot; class=&quot;headerlink&quot; title=&quot;if语句=1.一般形式：&quot;&gt;&lt;/a&gt;if语句=1.一般形式：&lt;/h3&gt;&lt;p&gt;if (表达式) {语句;}&lt;/p&gt;
&lt;p&gt;表达式：&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
</feed>
